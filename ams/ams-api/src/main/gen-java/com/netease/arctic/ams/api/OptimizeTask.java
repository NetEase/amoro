/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.netease.arctic.ams.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2022-11-07")
public class OptimizeTask implements org.apache.thrift.TBase<OptimizeTask, OptimizeTask._Fields>, java.io.Serializable, Cloneable, Comparable<OptimizeTask> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OptimizeTask");

  private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TABLE_IDENTIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("tableIdentifier", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField INSERT_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("insertFiles", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField DELETE_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("deleteFiles", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField BASE_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("baseFiles", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField EQ_DELETE_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("eqDeleteFiles", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField POS_DELETE_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("posDeleteFiles", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField SOURCE_NODES_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceNodes", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("properties", org.apache.thrift.protocol.TType.MAP, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new OptimizeTaskStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new OptimizeTaskTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable OptimizeTaskId taskId; // required
  public @org.apache.thrift.annotation.Nullable TableIdentifier tableIdentifier; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> insertFiles; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> deleteFiles; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> baseFiles; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> eqDeleteFiles; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> posDeleteFiles; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TreeNode> sourceNodes; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<String, String> properties; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TASK_ID((short)1, "taskId"),
    TABLE_IDENTIFIER((short)2, "tableIdentifier"),
    INSERT_FILES((short)3, "insertFiles"),
    DELETE_FILES((short)4, "deleteFiles"),
    BASE_FILES((short)5, "baseFiles"),
    EQ_DELETE_FILES((short)6, "eqDeleteFiles"),
    POS_DELETE_FILES((short)7, "posDeleteFiles"),
    SOURCE_NODES((short)8, "sourceNodes"),
    PROPERTIES((short)9, "properties");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TASK_ID
          return TASK_ID;
        case 2: // TABLE_IDENTIFIER
          return TABLE_IDENTIFIER;
        case 3: // INSERT_FILES
          return INSERT_FILES;
        case 4: // DELETE_FILES
          return DELETE_FILES;
        case 5: // BASE_FILES
          return BASE_FILES;
        case 6: // EQ_DELETE_FILES
          return EQ_DELETE_FILES;
        case 7: // POS_DELETE_FILES
          return POS_DELETE_FILES;
        case 8: // SOURCE_NODES
          return SOURCE_NODES;
        case 9: // PROPERTIES
          return PROPERTIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.INSERT_FILES,_Fields.DELETE_FILES,_Fields.BASE_FILES,_Fields.EQ_DELETE_FILES,_Fields.POS_DELETE_FILES,_Fields.SOURCE_NODES,_Fields.PROPERTIES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "OptimizeTaskId")));
    tmpMap.put(_Fields.TABLE_IDENTIFIER, new org.apache.thrift.meta_data.FieldMetaData("tableIdentifier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TableIdentifier.class)));
    tmpMap.put(_Fields.INSERT_FILES, new org.apache.thrift.meta_data.FieldMetaData("insertFiles", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.DELETE_FILES, new org.apache.thrift.meta_data.FieldMetaData("deleteFiles", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.BASE_FILES, new org.apache.thrift.meta_data.FieldMetaData("baseFiles", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.EQ_DELETE_FILES, new org.apache.thrift.meta_data.FieldMetaData("eqDeleteFiles", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.POS_DELETE_FILES, new org.apache.thrift.meta_data.FieldMetaData("posDeleteFiles", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.SOURCE_NODES, new org.apache.thrift.meta_data.FieldMetaData("sourceNodes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TreeNode.class))));
    tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OptimizeTask.class, metaDataMap);
  }

  public OptimizeTask() {
  }

  public OptimizeTask(
    OptimizeTaskId taskId,
    TableIdentifier tableIdentifier)
  {
    this();
    this.taskId = taskId;
    this.tableIdentifier = tableIdentifier;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OptimizeTask(OptimizeTask other) {
    if (other.isSetTaskId()) {
      this.taskId = new OptimizeTaskId(other.taskId);
    }
    if (other.isSetTableIdentifier()) {
      this.tableIdentifier = new TableIdentifier(other.tableIdentifier);
    }
    if (other.isSetInsertFiles()) {
      java.util.List<java.nio.ByteBuffer> __this__insertFiles = new java.util.ArrayList<java.nio.ByteBuffer>(other.insertFiles);
      this.insertFiles = __this__insertFiles;
    }
    if (other.isSetDeleteFiles()) {
      java.util.List<java.nio.ByteBuffer> __this__deleteFiles = new java.util.ArrayList<java.nio.ByteBuffer>(other.deleteFiles);
      this.deleteFiles = __this__deleteFiles;
    }
    if (other.isSetBaseFiles()) {
      java.util.List<java.nio.ByteBuffer> __this__baseFiles = new java.util.ArrayList<java.nio.ByteBuffer>(other.baseFiles);
      this.baseFiles = __this__baseFiles;
    }
    if (other.isSetEqDeleteFiles()) {
      java.util.List<java.nio.ByteBuffer> __this__eqDeleteFiles = new java.util.ArrayList<java.nio.ByteBuffer>(other.eqDeleteFiles);
      this.eqDeleteFiles = __this__eqDeleteFiles;
    }
    if (other.isSetPosDeleteFiles()) {
      java.util.List<java.nio.ByteBuffer> __this__posDeleteFiles = new java.util.ArrayList<java.nio.ByteBuffer>(other.posDeleteFiles);
      this.posDeleteFiles = __this__posDeleteFiles;
    }
    if (other.isSetSourceNodes()) {
      java.util.List<TreeNode> __this__sourceNodes = new java.util.ArrayList<TreeNode>(other.sourceNodes.size());
      for (TreeNode other_element : other.sourceNodes) {
        __this__sourceNodes.add(new TreeNode(other_element));
      }
      this.sourceNodes = __this__sourceNodes;
    }
    if (other.isSetProperties()) {
      java.util.Map<String, String> __this__properties = new java.util.HashMap<String, String>(other.properties);
      this.properties = __this__properties;
    }
  }

  public OptimizeTask deepCopy() {
    return new OptimizeTask(this);
  }

  @Override
  public void clear() {
    this.taskId = null;
    this.tableIdentifier = null;
    this.insertFiles = null;
    this.deleteFiles = null;
    this.baseFiles = null;
    this.eqDeleteFiles = null;
    this.posDeleteFiles = null;
    this.sourceNodes = null;
    this.properties = null;
  }

  @org.apache.thrift.annotation.Nullable
  public OptimizeTaskId getTaskId() {
    return this.taskId;
  }

  public OptimizeTask setTaskId(@org.apache.thrift.annotation.Nullable OptimizeTaskId taskId) {
    this.taskId = taskId;
    return this;
  }

  public void unsetTaskId() {
    this.taskId = null;
  }

  /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskId() {
    return this.taskId != null;
  }

  public void setTaskIdIsSet(boolean value) {
    if (!value) {
      this.taskId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TableIdentifier getTableIdentifier() {
    return this.tableIdentifier;
  }

  public OptimizeTask setTableIdentifier(@org.apache.thrift.annotation.Nullable TableIdentifier tableIdentifier) {
    this.tableIdentifier = tableIdentifier;
    return this;
  }

  public void unsetTableIdentifier() {
    this.tableIdentifier = null;
  }

  /** Returns true if field tableIdentifier is set (has been assigned a value) and false otherwise */
  public boolean isSetTableIdentifier() {
    return this.tableIdentifier != null;
  }

  public void setTableIdentifierIsSet(boolean value) {
    if (!value) {
      this.tableIdentifier = null;
    }
  }

  public int getInsertFilesSize() {
    return (this.insertFiles == null) ? 0 : this.insertFiles.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getInsertFilesIterator() {
    return (this.insertFiles == null) ? null : this.insertFiles.iterator();
  }

  public void addToInsertFiles(java.nio.ByteBuffer elem) {
    if (this.insertFiles == null) {
      this.insertFiles = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.insertFiles.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.nio.ByteBuffer> getInsertFiles() {
    return this.insertFiles;
  }

  public OptimizeTask setInsertFiles(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> insertFiles) {
    this.insertFiles = insertFiles;
    return this;
  }

  public void unsetInsertFiles() {
    this.insertFiles = null;
  }

  /** Returns true if field insertFiles is set (has been assigned a value) and false otherwise */
  public boolean isSetInsertFiles() {
    return this.insertFiles != null;
  }

  public void setInsertFilesIsSet(boolean value) {
    if (!value) {
      this.insertFiles = null;
    }
  }

  public int getDeleteFilesSize() {
    return (this.deleteFiles == null) ? 0 : this.deleteFiles.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getDeleteFilesIterator() {
    return (this.deleteFiles == null) ? null : this.deleteFiles.iterator();
  }

  public void addToDeleteFiles(java.nio.ByteBuffer elem) {
    if (this.deleteFiles == null) {
      this.deleteFiles = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.deleteFiles.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.nio.ByteBuffer> getDeleteFiles() {
    return this.deleteFiles;
  }

  public OptimizeTask setDeleteFiles(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> deleteFiles) {
    this.deleteFiles = deleteFiles;
    return this;
  }

  public void unsetDeleteFiles() {
    this.deleteFiles = null;
  }

  /** Returns true if field deleteFiles is set (has been assigned a value) and false otherwise */
  public boolean isSetDeleteFiles() {
    return this.deleteFiles != null;
  }

  public void setDeleteFilesIsSet(boolean value) {
    if (!value) {
      this.deleteFiles = null;
    }
  }

  public int getBaseFilesSize() {
    return (this.baseFiles == null) ? 0 : this.baseFiles.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getBaseFilesIterator() {
    return (this.baseFiles == null) ? null : this.baseFiles.iterator();
  }

  public void addToBaseFiles(java.nio.ByteBuffer elem) {
    if (this.baseFiles == null) {
      this.baseFiles = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.baseFiles.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.nio.ByteBuffer> getBaseFiles() {
    return this.baseFiles;
  }

  public OptimizeTask setBaseFiles(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> baseFiles) {
    this.baseFiles = baseFiles;
    return this;
  }

  public void unsetBaseFiles() {
    this.baseFiles = null;
  }

  /** Returns true if field baseFiles is set (has been assigned a value) and false otherwise */
  public boolean isSetBaseFiles() {
    return this.baseFiles != null;
  }

  public void setBaseFilesIsSet(boolean value) {
    if (!value) {
      this.baseFiles = null;
    }
  }

  public int getEqDeleteFilesSize() {
    return (this.eqDeleteFiles == null) ? 0 : this.eqDeleteFiles.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getEqDeleteFilesIterator() {
    return (this.eqDeleteFiles == null) ? null : this.eqDeleteFiles.iterator();
  }

  public void addToEqDeleteFiles(java.nio.ByteBuffer elem) {
    if (this.eqDeleteFiles == null) {
      this.eqDeleteFiles = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.eqDeleteFiles.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.nio.ByteBuffer> getEqDeleteFiles() {
    return this.eqDeleteFiles;
  }

  public OptimizeTask setEqDeleteFiles(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> eqDeleteFiles) {
    this.eqDeleteFiles = eqDeleteFiles;
    return this;
  }

  public void unsetEqDeleteFiles() {
    this.eqDeleteFiles = null;
  }

  /** Returns true if field eqDeleteFiles is set (has been assigned a value) and false otherwise */
  public boolean isSetEqDeleteFiles() {
    return this.eqDeleteFiles != null;
  }

  public void setEqDeleteFilesIsSet(boolean value) {
    if (!value) {
      this.eqDeleteFiles = null;
    }
  }

  public int getPosDeleteFilesSize() {
    return (this.posDeleteFiles == null) ? 0 : this.posDeleteFiles.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getPosDeleteFilesIterator() {
    return (this.posDeleteFiles == null) ? null : this.posDeleteFiles.iterator();
  }

  public void addToPosDeleteFiles(java.nio.ByteBuffer elem) {
    if (this.posDeleteFiles == null) {
      this.posDeleteFiles = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.posDeleteFiles.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.nio.ByteBuffer> getPosDeleteFiles() {
    return this.posDeleteFiles;
  }

  public OptimizeTask setPosDeleteFiles(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> posDeleteFiles) {
    this.posDeleteFiles = posDeleteFiles;
    return this;
  }

  public void unsetPosDeleteFiles() {
    this.posDeleteFiles = null;
  }

  /** Returns true if field posDeleteFiles is set (has been assigned a value) and false otherwise */
  public boolean isSetPosDeleteFiles() {
    return this.posDeleteFiles != null;
  }

  public void setPosDeleteFilesIsSet(boolean value) {
    if (!value) {
      this.posDeleteFiles = null;
    }
  }

  public int getSourceNodesSize() {
    return (this.sourceNodes == null) ? 0 : this.sourceNodes.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TreeNode> getSourceNodesIterator() {
    return (this.sourceNodes == null) ? null : this.sourceNodes.iterator();
  }

  public void addToSourceNodes(TreeNode elem) {
    if (this.sourceNodes == null) {
      this.sourceNodes = new java.util.ArrayList<TreeNode>();
    }
    this.sourceNodes.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TreeNode> getSourceNodes() {
    return this.sourceNodes;
  }

  public OptimizeTask setSourceNodes(@org.apache.thrift.annotation.Nullable java.util.List<TreeNode> sourceNodes) {
    this.sourceNodes = sourceNodes;
    return this;
  }

  public void unsetSourceNodes() {
    this.sourceNodes = null;
  }

  /** Returns true if field sourceNodes is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceNodes() {
    return this.sourceNodes != null;
  }

  public void setSourceNodesIsSet(boolean value) {
    if (!value) {
      this.sourceNodes = null;
    }
  }

  public int getPropertiesSize() {
    return (this.properties == null) ? 0 : this.properties.size();
  }

  public void putToProperties(String key, String val) {
    if (this.properties == null) {
      this.properties = new java.util.HashMap<String, String>();
    }
    this.properties.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<String, String> getProperties() {
    return this.properties;
  }

  public OptimizeTask setProperties(@org.apache.thrift.annotation.Nullable java.util.Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public void unsetProperties() {
    this.properties = null;
  }

  /** Returns true if field properties is set (has been assigned a value) and false otherwise */
  public boolean isSetProperties() {
    return this.properties != null;
  }

  public void setPropertiesIsSet(boolean value) {
    if (!value) {
      this.properties = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case TASK_ID:
      if (value == null) {
        unsetTaskId();
      } else {
        setTaskId((OptimizeTaskId)value);
      }
      break;

    case TABLE_IDENTIFIER:
      if (value == null) {
        unsetTableIdentifier();
      } else {
        setTableIdentifier((TableIdentifier)value);
      }
      break;

    case INSERT_FILES:
      if (value == null) {
        unsetInsertFiles();
      } else {
        setInsertFiles((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case DELETE_FILES:
      if (value == null) {
        unsetDeleteFiles();
      } else {
        setDeleteFiles((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case BASE_FILES:
      if (value == null) {
        unsetBaseFiles();
      } else {
        setBaseFiles((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case EQ_DELETE_FILES:
      if (value == null) {
        unsetEqDeleteFiles();
      } else {
        setEqDeleteFiles((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case POS_DELETE_FILES:
      if (value == null) {
        unsetPosDeleteFiles();
      } else {
        setPosDeleteFiles((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case SOURCE_NODES:
      if (value == null) {
        unsetSourceNodes();
      } else {
        setSourceNodes((java.util.List<TreeNode>)value);
      }
      break;

    case PROPERTIES:
      if (value == null) {
        unsetProperties();
      } else {
        setProperties((java.util.Map<String, String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TASK_ID:
      return getTaskId();

    case TABLE_IDENTIFIER:
      return getTableIdentifier();

    case INSERT_FILES:
      return getInsertFiles();

    case DELETE_FILES:
      return getDeleteFiles();

    case BASE_FILES:
      return getBaseFiles();

    case EQ_DELETE_FILES:
      return getEqDeleteFiles();

    case POS_DELETE_FILES:
      return getPosDeleteFiles();

    case SOURCE_NODES:
      return getSourceNodes();

    case PROPERTIES:
      return getProperties();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TASK_ID:
      return isSetTaskId();
    case TABLE_IDENTIFIER:
      return isSetTableIdentifier();
    case INSERT_FILES:
      return isSetInsertFiles();
    case DELETE_FILES:
      return isSetDeleteFiles();
    case BASE_FILES:
      return isSetBaseFiles();
    case EQ_DELETE_FILES:
      return isSetEqDeleteFiles();
    case POS_DELETE_FILES:
      return isSetPosDeleteFiles();
    case SOURCE_NODES:
      return isSetSourceNodes();
    case PROPERTIES:
      return isSetProperties();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OptimizeTask)
      return this.equals((OptimizeTask)that);
    return false;
  }

  public boolean equals(OptimizeTask that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_taskId = true && this.isSetTaskId();
    boolean that_present_taskId = true && that.isSetTaskId();
    if (this_present_taskId || that_present_taskId) {
      if (!(this_present_taskId && that_present_taskId))
        return false;
      if (!this.taskId.equals(that.taskId))
        return false;
    }

    boolean this_present_tableIdentifier = true && this.isSetTableIdentifier();
    boolean that_present_tableIdentifier = true && that.isSetTableIdentifier();
    if (this_present_tableIdentifier || that_present_tableIdentifier) {
      if (!(this_present_tableIdentifier && that_present_tableIdentifier))
        return false;
      if (!this.tableIdentifier.equals(that.tableIdentifier))
        return false;
    }

    boolean this_present_insertFiles = true && this.isSetInsertFiles();
    boolean that_present_insertFiles = true && that.isSetInsertFiles();
    if (this_present_insertFiles || that_present_insertFiles) {
      if (!(this_present_insertFiles && that_present_insertFiles))
        return false;
      if (!this.insertFiles.equals(that.insertFiles))
        return false;
    }

    boolean this_present_deleteFiles = true && this.isSetDeleteFiles();
    boolean that_present_deleteFiles = true && that.isSetDeleteFiles();
    if (this_present_deleteFiles || that_present_deleteFiles) {
      if (!(this_present_deleteFiles && that_present_deleteFiles))
        return false;
      if (!this.deleteFiles.equals(that.deleteFiles))
        return false;
    }

    boolean this_present_baseFiles = true && this.isSetBaseFiles();
    boolean that_present_baseFiles = true && that.isSetBaseFiles();
    if (this_present_baseFiles || that_present_baseFiles) {
      if (!(this_present_baseFiles && that_present_baseFiles))
        return false;
      if (!this.baseFiles.equals(that.baseFiles))
        return false;
    }

    boolean this_present_eqDeleteFiles = true && this.isSetEqDeleteFiles();
    boolean that_present_eqDeleteFiles = true && that.isSetEqDeleteFiles();
    if (this_present_eqDeleteFiles || that_present_eqDeleteFiles) {
      if (!(this_present_eqDeleteFiles && that_present_eqDeleteFiles))
        return false;
      if (!this.eqDeleteFiles.equals(that.eqDeleteFiles))
        return false;
    }

    boolean this_present_posDeleteFiles = true && this.isSetPosDeleteFiles();
    boolean that_present_posDeleteFiles = true && that.isSetPosDeleteFiles();
    if (this_present_posDeleteFiles || that_present_posDeleteFiles) {
      if (!(this_present_posDeleteFiles && that_present_posDeleteFiles))
        return false;
      if (!this.posDeleteFiles.equals(that.posDeleteFiles))
        return false;
    }

    boolean this_present_sourceNodes = true && this.isSetSourceNodes();
    boolean that_present_sourceNodes = true && that.isSetSourceNodes();
    if (this_present_sourceNodes || that_present_sourceNodes) {
      if (!(this_present_sourceNodes && that_present_sourceNodes))
        return false;
      if (!this.sourceNodes.equals(that.sourceNodes))
        return false;
    }

    boolean this_present_properties = true && this.isSetProperties();
    boolean that_present_properties = true && that.isSetProperties();
    if (this_present_properties || that_present_properties) {
      if (!(this_present_properties && that_present_properties))
        return false;
      if (!this.properties.equals(that.properties))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTaskId()) ? 131071 : 524287);
    if (isSetTaskId())
      hashCode = hashCode * 8191 + taskId.hashCode();

    hashCode = hashCode * 8191 + ((isSetTableIdentifier()) ? 131071 : 524287);
    if (isSetTableIdentifier())
      hashCode = hashCode * 8191 + tableIdentifier.hashCode();

    hashCode = hashCode * 8191 + ((isSetInsertFiles()) ? 131071 : 524287);
    if (isSetInsertFiles())
      hashCode = hashCode * 8191 + insertFiles.hashCode();

    hashCode = hashCode * 8191 + ((isSetDeleteFiles()) ? 131071 : 524287);
    if (isSetDeleteFiles())
      hashCode = hashCode * 8191 + deleteFiles.hashCode();

    hashCode = hashCode * 8191 + ((isSetBaseFiles()) ? 131071 : 524287);
    if (isSetBaseFiles())
      hashCode = hashCode * 8191 + baseFiles.hashCode();

    hashCode = hashCode * 8191 + ((isSetEqDeleteFiles()) ? 131071 : 524287);
    if (isSetEqDeleteFiles())
      hashCode = hashCode * 8191 + eqDeleteFiles.hashCode();

    hashCode = hashCode * 8191 + ((isSetPosDeleteFiles()) ? 131071 : 524287);
    if (isSetPosDeleteFiles())
      hashCode = hashCode * 8191 + posDeleteFiles.hashCode();

    hashCode = hashCode * 8191 + ((isSetSourceNodes()) ? 131071 : 524287);
    if (isSetSourceNodes())
      hashCode = hashCode * 8191 + sourceNodes.hashCode();

    hashCode = hashCode * 8191 + ((isSetProperties()) ? 131071 : 524287);
    if (isSetProperties())
      hashCode = hashCode * 8191 + properties.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(OptimizeTask other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTableIdentifier()).compareTo(other.isSetTableIdentifier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableIdentifier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableIdentifier, other.tableIdentifier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInsertFiles()).compareTo(other.isSetInsertFiles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInsertFiles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.insertFiles, other.insertFiles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeleteFiles()).compareTo(other.isSetDeleteFiles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeleteFiles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deleteFiles, other.deleteFiles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBaseFiles()).compareTo(other.isSetBaseFiles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBaseFiles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baseFiles, other.baseFiles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEqDeleteFiles()).compareTo(other.isSetEqDeleteFiles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEqDeleteFiles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eqDeleteFiles, other.eqDeleteFiles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosDeleteFiles()).compareTo(other.isSetPosDeleteFiles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosDeleteFiles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.posDeleteFiles, other.posDeleteFiles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceNodes()).compareTo(other.isSetSourceNodes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceNodes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceNodes, other.sourceNodes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProperties()).compareTo(other.isSetProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.properties, other.properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OptimizeTask(");
    boolean first = true;

    sb.append("taskId:");
    if (this.taskId == null) {
      sb.append("null");
    } else {
      sb.append(this.taskId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tableIdentifier:");
    if (this.tableIdentifier == null) {
      sb.append("null");
    } else {
      sb.append(this.tableIdentifier);
    }
    first = false;
    if (isSetInsertFiles()) {
      if (!first) sb.append(", ");
      sb.append("insertFiles:");
      if (this.insertFiles == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.insertFiles, sb);
      }
      first = false;
    }
    if (isSetDeleteFiles()) {
      if (!first) sb.append(", ");
      sb.append("deleteFiles:");
      if (this.deleteFiles == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.deleteFiles, sb);
      }
      first = false;
    }
    if (isSetBaseFiles()) {
      if (!first) sb.append(", ");
      sb.append("baseFiles:");
      if (this.baseFiles == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.baseFiles, sb);
      }
      first = false;
    }
    if (isSetEqDeleteFiles()) {
      if (!first) sb.append(", ");
      sb.append("eqDeleteFiles:");
      if (this.eqDeleteFiles == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.eqDeleteFiles, sb);
      }
      first = false;
    }
    if (isSetPosDeleteFiles()) {
      if (!first) sb.append(", ");
      sb.append("posDeleteFiles:");
      if (this.posDeleteFiles == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.posDeleteFiles, sb);
      }
      first = false;
    }
    if (isSetSourceNodes()) {
      if (!first) sb.append(", ");
      sb.append("sourceNodes:");
      if (this.sourceNodes == null) {
        sb.append("null");
      } else {
        sb.append(this.sourceNodes);
      }
      first = false;
    }
    if (isSetProperties()) {
      if (!first) sb.append(", ");
      sb.append("properties:");
      if (this.properties == null) {
        sb.append("null");
      } else {
        sb.append(this.properties);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (tableIdentifier != null) {
      tableIdentifier.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OptimizeTaskStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public OptimizeTaskStandardScheme getScheme() {
      return new OptimizeTaskStandardScheme();
    }
  }

  private static class OptimizeTaskStandardScheme extends org.apache.thrift.scheme.StandardScheme<OptimizeTask> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OptimizeTask struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.taskId = new OptimizeTaskId();
              struct.taskId.read(iprot);
              struct.setTaskIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TABLE_IDENTIFIER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tableIdentifier = new TableIdentifier();
              struct.tableIdentifier.read(iprot);
              struct.setTableIdentifierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INSERT_FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.insertFiles = new java.util.ArrayList<java.nio.ByteBuffer>(_list0.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readBinary();
                  struct.insertFiles.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setInsertFilesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DELETE_FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.deleteFiles = new java.util.ArrayList<java.nio.ByteBuffer>(_list3.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readBinary();
                  struct.deleteFiles.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setDeleteFilesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BASE_FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.baseFiles = new java.util.ArrayList<java.nio.ByteBuffer>(_list6.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = iprot.readBinary();
                  struct.baseFiles.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setBaseFilesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EQ_DELETE_FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.eqDeleteFiles = new java.util.ArrayList<java.nio.ByteBuffer>(_list9.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem10;
                for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                {
                  _elem10 = iprot.readBinary();
                  struct.eqDeleteFiles.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setEqDeleteFilesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // POS_DELETE_FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                struct.posDeleteFiles = new java.util.ArrayList<java.nio.ByteBuffer>(_list12.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem13;
                for (int _i14 = 0; _i14 < _list12.size; ++_i14)
                {
                  _elem13 = iprot.readBinary();
                  struct.posDeleteFiles.add(_elem13);
                }
                iprot.readListEnd();
              }
              struct.setPosDeleteFilesIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SOURCE_NODES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list15 = iprot.readListBegin();
                struct.sourceNodes = new java.util.ArrayList<TreeNode>(_list15.size);
                @org.apache.thrift.annotation.Nullable TreeNode _elem16;
                for (int _i17 = 0; _i17 < _list15.size; ++_i17)
                {
                  _elem16 = new TreeNode();
                  _elem16.read(iprot);
                  struct.sourceNodes.add(_elem16);
                }
                iprot.readListEnd();
              }
              struct.setSourceNodesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map18 = iprot.readMapBegin();
                struct.properties = new java.util.HashMap<String, String>(2*_map18.size);
                @org.apache.thrift.annotation.Nullable String _key19;
                @org.apache.thrift.annotation.Nullable String _val20;
                for (int _i21 = 0; _i21 < _map18.size; ++_i21)
                {
                  _key19 = iprot.readString();
                  _val20 = iprot.readString();
                  struct.properties.put(_key19, _val20);
                }
                iprot.readMapEnd();
              }
              struct.setPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OptimizeTask struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.taskId != null) {
        oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
        struct.taskId.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.tableIdentifier != null) {
        oprot.writeFieldBegin(TABLE_IDENTIFIER_FIELD_DESC);
        struct.tableIdentifier.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.insertFiles != null) {
        if (struct.isSetInsertFiles()) {
          oprot.writeFieldBegin(INSERT_FILES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.insertFiles.size()));
            for (java.nio.ByteBuffer _iter22 : struct.insertFiles)
            {
              oprot.writeBinary(_iter22);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.deleteFiles != null) {
        if (struct.isSetDeleteFiles()) {
          oprot.writeFieldBegin(DELETE_FILES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.deleteFiles.size()));
            for (java.nio.ByteBuffer _iter23 : struct.deleteFiles)
            {
              oprot.writeBinary(_iter23);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.baseFiles != null) {
        if (struct.isSetBaseFiles()) {
          oprot.writeFieldBegin(BASE_FILES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.baseFiles.size()));
            for (java.nio.ByteBuffer _iter24 : struct.baseFiles)
            {
              oprot.writeBinary(_iter24);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.eqDeleteFiles != null) {
        if (struct.isSetEqDeleteFiles()) {
          oprot.writeFieldBegin(EQ_DELETE_FILES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.eqDeleteFiles.size()));
            for (java.nio.ByteBuffer _iter25 : struct.eqDeleteFiles)
            {
              oprot.writeBinary(_iter25);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.posDeleteFiles != null) {
        if (struct.isSetPosDeleteFiles()) {
          oprot.writeFieldBegin(POS_DELETE_FILES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.posDeleteFiles.size()));
            for (java.nio.ByteBuffer _iter26 : struct.posDeleteFiles)
            {
              oprot.writeBinary(_iter26);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.sourceNodes != null) {
        if (struct.isSetSourceNodes()) {
          oprot.writeFieldBegin(SOURCE_NODES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sourceNodes.size()));
            for (TreeNode _iter27 : struct.sourceNodes)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.properties != null) {
        if (struct.isSetProperties()) {
          oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.properties.size()));
            for (java.util.Map.Entry<String, String> _iter28 : struct.properties.entrySet())
            {
              oprot.writeString(_iter28.getKey());
              oprot.writeString(_iter28.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OptimizeTaskTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public OptimizeTaskTupleScheme getScheme() {
      return new OptimizeTaskTupleScheme();
    }
  }

  private static class OptimizeTaskTupleScheme extends org.apache.thrift.scheme.TupleScheme<OptimizeTask> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OptimizeTask struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTaskId()) {
        optionals.set(0);
      }
      if (struct.isSetTableIdentifier()) {
        optionals.set(1);
      }
      if (struct.isSetInsertFiles()) {
        optionals.set(2);
      }
      if (struct.isSetDeleteFiles()) {
        optionals.set(3);
      }
      if (struct.isSetBaseFiles()) {
        optionals.set(4);
      }
      if (struct.isSetEqDeleteFiles()) {
        optionals.set(5);
      }
      if (struct.isSetPosDeleteFiles()) {
        optionals.set(6);
      }
      if (struct.isSetSourceNodes()) {
        optionals.set(7);
      }
      if (struct.isSetProperties()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetTaskId()) {
        struct.taskId.write(oprot);
      }
      if (struct.isSetTableIdentifier()) {
        struct.tableIdentifier.write(oprot);
      }
      if (struct.isSetInsertFiles()) {
        {
          oprot.writeI32(struct.insertFiles.size());
          for (java.nio.ByteBuffer _iter29 : struct.insertFiles)
          {
            oprot.writeBinary(_iter29);
          }
        }
      }
      if (struct.isSetDeleteFiles()) {
        {
          oprot.writeI32(struct.deleteFiles.size());
          for (java.nio.ByteBuffer _iter30 : struct.deleteFiles)
          {
            oprot.writeBinary(_iter30);
          }
        }
      }
      if (struct.isSetBaseFiles()) {
        {
          oprot.writeI32(struct.baseFiles.size());
          for (java.nio.ByteBuffer _iter31 : struct.baseFiles)
          {
            oprot.writeBinary(_iter31);
          }
        }
      }
      if (struct.isSetEqDeleteFiles()) {
        {
          oprot.writeI32(struct.eqDeleteFiles.size());
          for (java.nio.ByteBuffer _iter32 : struct.eqDeleteFiles)
          {
            oprot.writeBinary(_iter32);
          }
        }
      }
      if (struct.isSetPosDeleteFiles()) {
        {
          oprot.writeI32(struct.posDeleteFiles.size());
          for (java.nio.ByteBuffer _iter33 : struct.posDeleteFiles)
          {
            oprot.writeBinary(_iter33);
          }
        }
      }
      if (struct.isSetSourceNodes()) {
        {
          oprot.writeI32(struct.sourceNodes.size());
          for (TreeNode _iter34 : struct.sourceNodes)
          {
            _iter34.write(oprot);
          }
        }
      }
      if (struct.isSetProperties()) {
        {
          oprot.writeI32(struct.properties.size());
          for (java.util.Map.Entry<String, String> _iter35 : struct.properties.entrySet())
          {
            oprot.writeString(_iter35.getKey());
            oprot.writeString(_iter35.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OptimizeTask struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.taskId = new OptimizeTaskId();
        struct.taskId.read(iprot);
        struct.setTaskIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tableIdentifier = new TableIdentifier();
        struct.tableIdentifier.read(iprot);
        struct.setTableIdentifierIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list36 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.insertFiles = new java.util.ArrayList<java.nio.ByteBuffer>(_list36.size);
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem37;
          for (int _i38 = 0; _i38 < _list36.size; ++_i38)
          {
            _elem37 = iprot.readBinary();
            struct.insertFiles.add(_elem37);
          }
        }
        struct.setInsertFilesIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.deleteFiles = new java.util.ArrayList<java.nio.ByteBuffer>(_list39.size);
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem40;
          for (int _i41 = 0; _i41 < _list39.size; ++_i41)
          {
            _elem40 = iprot.readBinary();
            struct.deleteFiles.add(_elem40);
          }
        }
        struct.setDeleteFilesIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.baseFiles = new java.util.ArrayList<java.nio.ByteBuffer>(_list42.size);
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem43;
          for (int _i44 = 0; _i44 < _list42.size; ++_i44)
          {
            _elem43 = iprot.readBinary();
            struct.baseFiles.add(_elem43);
          }
        }
        struct.setBaseFilesIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.eqDeleteFiles = new java.util.ArrayList<java.nio.ByteBuffer>(_list45.size);
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = iprot.readBinary();
            struct.eqDeleteFiles.add(_elem46);
          }
        }
        struct.setEqDeleteFilesIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list48 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.posDeleteFiles = new java.util.ArrayList<java.nio.ByteBuffer>(_list48.size);
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem49;
          for (int _i50 = 0; _i50 < _list48.size; ++_i50)
          {
            _elem49 = iprot.readBinary();
            struct.posDeleteFiles.add(_elem49);
          }
        }
        struct.setPosDeleteFilesIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list51 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.sourceNodes = new java.util.ArrayList<TreeNode>(_list51.size);
          @org.apache.thrift.annotation.Nullable TreeNode _elem52;
          for (int _i53 = 0; _i53 < _list51.size; ++_i53)
          {
            _elem52 = new TreeNode();
            _elem52.read(iprot);
            struct.sourceNodes.add(_elem52);
          }
        }
        struct.setSourceNodesIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TMap _map54 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.properties = new java.util.HashMap<String, String>(2*_map54.size);
          @org.apache.thrift.annotation.Nullable String _key55;
          @org.apache.thrift.annotation.Nullable String _val56;
          for (int _i57 = 0; _i57 < _map54.size; ++_i57)
          {
            _key55 = iprot.readString();
            _val56 = iprot.readString();
            struct.properties.put(_key55, _val56);
          }
        }
        struct.setPropertiesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

