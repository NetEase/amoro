/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.netease.arctic.ams.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2022-08-08")
public class TableCommitMeta implements org.apache.thrift.TBase<TableCommitMeta, TableCommitMeta._Fields>, java.io.Serializable, Cloneable, Comparable<TableCommitMeta> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TableCommitMeta");

  private static final org.apache.thrift.protocol.TField TABLE_IDENTIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("tableIdentifier", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("action", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CHANGES_FIELD_DESC = new org.apache.thrift.protocol.TField("changes", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField COMMIT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("commitTime", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField NEW_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("newProperties", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField OLD_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("oldProperties", org.apache.thrift.protocol.TType.MAP, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TableCommitMetaStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TableCommitMetaTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable com.netease.arctic.ams.api.TableIdentifier tableIdentifier; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String action; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<TableChange> changes; // required
  public long commitTime; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> newProperties; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> oldProperties; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLE_IDENTIFIER((short)1, "tableIdentifier"),
    ACTION((short)2, "action"),
    CHANGES((short)3, "changes"),
    COMMIT_TIME((short)4, "commitTime"),
    NEW_PROPERTIES((short)5, "newProperties"),
    OLD_PROPERTIES((short)6, "oldProperties");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLE_IDENTIFIER
          return TABLE_IDENTIFIER;
        case 2: // ACTION
          return ACTION;
        case 3: // CHANGES
          return CHANGES;
        case 4: // COMMIT_TIME
          return COMMIT_TIME;
        case 5: // NEW_PROPERTIES
          return NEW_PROPERTIES;
        case 6: // OLD_PROPERTIES
          return OLD_PROPERTIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COMMITTIME_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLE_IDENTIFIER, new org.apache.thrift.meta_data.FieldMetaData("tableIdentifier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.netease.arctic.ams.api.TableIdentifier.class)));
    tmpMap.put(_Fields.ACTION, new org.apache.thrift.meta_data.FieldMetaData("action", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANGES, new org.apache.thrift.meta_data.FieldMetaData("changes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TableChange.class))));
    tmpMap.put(_Fields.COMMIT_TIME, new org.apache.thrift.meta_data.FieldMetaData("commitTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NEW_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("newProperties", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.OLD_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("oldProperties", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TableCommitMeta.class, metaDataMap);
  }

  public TableCommitMeta() {
  }

  public TableCommitMeta(
    com.netease.arctic.ams.api.TableIdentifier tableIdentifier,
    java.lang.String action,
    java.util.List<TableChange> changes,
    long commitTime,
    java.util.Map<java.lang.String,java.lang.String> newProperties,
    java.util.Map<java.lang.String,java.lang.String> oldProperties)
  {
    this();
    this.tableIdentifier = tableIdentifier;
    this.action = action;
    this.changes = changes;
    this.commitTime = commitTime;
    setCommitTimeIsSet(true);
    this.newProperties = newProperties;
    this.oldProperties = oldProperties;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TableCommitMeta(TableCommitMeta other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTableIdentifier()) {
      this.tableIdentifier = new com.netease.arctic.ams.api.TableIdentifier(other.tableIdentifier);
    }
    if (other.isSetAction()) {
      this.action = other.action;
    }
    if (other.isSetChanges()) {
      java.util.List<TableChange> __this__changes = new java.util.ArrayList<TableChange>(other.changes.size());
      for (TableChange other_element : other.changes) {
        __this__changes.add(new TableChange(other_element));
      }
      this.changes = __this__changes;
    }
    this.commitTime = other.commitTime;
    if (other.isSetNewProperties()) {
      java.util.Map<java.lang.String,java.lang.String> __this__newProperties = new java.util.HashMap<java.lang.String,java.lang.String>(other.newProperties);
      this.newProperties = __this__newProperties;
    }
    if (other.isSetOldProperties()) {
      java.util.Map<java.lang.String,java.lang.String> __this__oldProperties = new java.util.HashMap<java.lang.String,java.lang.String>(other.oldProperties);
      this.oldProperties = __this__oldProperties;
    }
  }

  public TableCommitMeta deepCopy() {
    return new TableCommitMeta(this);
  }

  @Override
  public void clear() {
    this.tableIdentifier = null;
    this.action = null;
    this.changes = null;
    setCommitTimeIsSet(false);
    this.commitTime = 0;
    this.newProperties = null;
    this.oldProperties = null;
  }

  @org.apache.thrift.annotation.Nullable
  public com.netease.arctic.ams.api.TableIdentifier getTableIdentifier() {
    return this.tableIdentifier;
  }

  public TableCommitMeta setTableIdentifier(@org.apache.thrift.annotation.Nullable com.netease.arctic.ams.api.TableIdentifier tableIdentifier) {
    this.tableIdentifier = tableIdentifier;
    return this;
  }

  public void unsetTableIdentifier() {
    this.tableIdentifier = null;
  }

  /** Returns true if field tableIdentifier is set (has been assigned a value) and false otherwise */
  public boolean isSetTableIdentifier() {
    return this.tableIdentifier != null;
  }

  public void setTableIdentifierIsSet(boolean value) {
    if (!value) {
      this.tableIdentifier = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAction() {
    return this.action;
  }

  public TableCommitMeta setAction(@org.apache.thrift.annotation.Nullable java.lang.String action) {
    this.action = action;
    return this;
  }

  public void unsetAction() {
    this.action = null;
  }

  /** Returns true if field action is set (has been assigned a value) and false otherwise */
  public boolean isSetAction() {
    return this.action != null;
  }

  public void setActionIsSet(boolean value) {
    if (!value) {
      this.action = null;
    }
  }

  public int getChangesSize() {
    return (this.changes == null) ? 0 : this.changes.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TableChange> getChangesIterator() {
    return (this.changes == null) ? null : this.changes.iterator();
  }

  public void addToChanges(TableChange elem) {
    if (this.changes == null) {
      this.changes = new java.util.ArrayList<TableChange>();
    }
    this.changes.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TableChange> getChanges() {
    return this.changes;
  }

  public TableCommitMeta setChanges(@org.apache.thrift.annotation.Nullable java.util.List<TableChange> changes) {
    this.changes = changes;
    return this;
  }

  public void unsetChanges() {
    this.changes = null;
  }

  /** Returns true if field changes is set (has been assigned a value) and false otherwise */
  public boolean isSetChanges() {
    return this.changes != null;
  }

  public void setChangesIsSet(boolean value) {
    if (!value) {
      this.changes = null;
    }
  }

  public long getCommitTime() {
    return this.commitTime;
  }

  public TableCommitMeta setCommitTime(long commitTime) {
    this.commitTime = commitTime;
    setCommitTimeIsSet(true);
    return this;
  }

  public void unsetCommitTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMMITTIME_ISSET_ID);
  }

  /** Returns true if field commitTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCommitTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMMITTIME_ISSET_ID);
  }

  public void setCommitTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMMITTIME_ISSET_ID, value);
  }

  public int getNewPropertiesSize() {
    return (this.newProperties == null) ? 0 : this.newProperties.size();
  }

  public void putToNewProperties(java.lang.String key, java.lang.String val) {
    if (this.newProperties == null) {
      this.newProperties = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.newProperties.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getNewProperties() {
    return this.newProperties;
  }

  public TableCommitMeta setNewProperties(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> newProperties) {
    this.newProperties = newProperties;
    return this;
  }

  public void unsetNewProperties() {
    this.newProperties = null;
  }

  /** Returns true if field newProperties is set (has been assigned a value) and false otherwise */
  public boolean isSetNewProperties() {
    return this.newProperties != null;
  }

  public void setNewPropertiesIsSet(boolean value) {
    if (!value) {
      this.newProperties = null;
    }
  }

  public int getOldPropertiesSize() {
    return (this.oldProperties == null) ? 0 : this.oldProperties.size();
  }

  public void putToOldProperties(java.lang.String key, java.lang.String val) {
    if (this.oldProperties == null) {
      this.oldProperties = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.oldProperties.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getOldProperties() {
    return this.oldProperties;
  }

  public TableCommitMeta setOldProperties(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> oldProperties) {
    this.oldProperties = oldProperties;
    return this;
  }

  public void unsetOldProperties() {
    this.oldProperties = null;
  }

  /** Returns true if field oldProperties is set (has been assigned a value) and false otherwise */
  public boolean isSetOldProperties() {
    return this.oldProperties != null;
  }

  public void setOldPropertiesIsSet(boolean value) {
    if (!value) {
      this.oldProperties = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TABLE_IDENTIFIER:
      if (value == null) {
        unsetTableIdentifier();
      } else {
        setTableIdentifier((com.netease.arctic.ams.api.TableIdentifier)value);
      }
      break;

    case ACTION:
      if (value == null) {
        unsetAction();
      } else {
        setAction((java.lang.String)value);
      }
      break;

    case CHANGES:
      if (value == null) {
        unsetChanges();
      } else {
        setChanges((java.util.List<TableChange>)value);
      }
      break;

    case COMMIT_TIME:
      if (value == null) {
        unsetCommitTime();
      } else {
        setCommitTime((java.lang.Long)value);
      }
      break;

    case NEW_PROPERTIES:
      if (value == null) {
        unsetNewProperties();
      } else {
        setNewProperties((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case OLD_PROPERTIES:
      if (value == null) {
        unsetOldProperties();
      } else {
        setOldProperties((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLE_IDENTIFIER:
      return getTableIdentifier();

    case ACTION:
      return getAction();

    case CHANGES:
      return getChanges();

    case COMMIT_TIME:
      return getCommitTime();

    case NEW_PROPERTIES:
      return getNewProperties();

    case OLD_PROPERTIES:
      return getOldProperties();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TABLE_IDENTIFIER:
      return isSetTableIdentifier();
    case ACTION:
      return isSetAction();
    case CHANGES:
      return isSetChanges();
    case COMMIT_TIME:
      return isSetCommitTime();
    case NEW_PROPERTIES:
      return isSetNewProperties();
    case OLD_PROPERTIES:
      return isSetOldProperties();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TableCommitMeta)
      return this.equals((TableCommitMeta)that);
    return false;
  }

  public boolean equals(TableCommitMeta that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_tableIdentifier = true && this.isSetTableIdentifier();
    boolean that_present_tableIdentifier = true && that.isSetTableIdentifier();
    if (this_present_tableIdentifier || that_present_tableIdentifier) {
      if (!(this_present_tableIdentifier && that_present_tableIdentifier))
        return false;
      if (!this.tableIdentifier.equals(that.tableIdentifier))
        return false;
    }

    boolean this_present_action = true && this.isSetAction();
    boolean that_present_action = true && that.isSetAction();
    if (this_present_action || that_present_action) {
      if (!(this_present_action && that_present_action))
        return false;
      if (!this.action.equals(that.action))
        return false;
    }

    boolean this_present_changes = true && this.isSetChanges();
    boolean that_present_changes = true && that.isSetChanges();
    if (this_present_changes || that_present_changes) {
      if (!(this_present_changes && that_present_changes))
        return false;
      if (!this.changes.equals(that.changes))
        return false;
    }

    boolean this_present_commitTime = true;
    boolean that_present_commitTime = true;
    if (this_present_commitTime || that_present_commitTime) {
      if (!(this_present_commitTime && that_present_commitTime))
        return false;
      if (this.commitTime != that.commitTime)
        return false;
    }

    boolean this_present_newProperties = true && this.isSetNewProperties();
    boolean that_present_newProperties = true && that.isSetNewProperties();
    if (this_present_newProperties || that_present_newProperties) {
      if (!(this_present_newProperties && that_present_newProperties))
        return false;
      if (!this.newProperties.equals(that.newProperties))
        return false;
    }

    boolean this_present_oldProperties = true && this.isSetOldProperties();
    boolean that_present_oldProperties = true && that.isSetOldProperties();
    if (this_present_oldProperties || that_present_oldProperties) {
      if (!(this_present_oldProperties && that_present_oldProperties))
        return false;
      if (!this.oldProperties.equals(that.oldProperties))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTableIdentifier()) ? 131071 : 524287);
    if (isSetTableIdentifier())
      hashCode = hashCode * 8191 + tableIdentifier.hashCode();

    hashCode = hashCode * 8191 + ((isSetAction()) ? 131071 : 524287);
    if (isSetAction())
      hashCode = hashCode * 8191 + action.hashCode();

    hashCode = hashCode * 8191 + ((isSetChanges()) ? 131071 : 524287);
    if (isSetChanges())
      hashCode = hashCode * 8191 + changes.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(commitTime);

    hashCode = hashCode * 8191 + ((isSetNewProperties()) ? 131071 : 524287);
    if (isSetNewProperties())
      hashCode = hashCode * 8191 + newProperties.hashCode();

    hashCode = hashCode * 8191 + ((isSetOldProperties()) ? 131071 : 524287);
    if (isSetOldProperties())
      hashCode = hashCode * 8191 + oldProperties.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TableCommitMeta other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTableIdentifier()).compareTo(other.isSetTableIdentifier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableIdentifier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableIdentifier, other.tableIdentifier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAction()).compareTo(other.isSetAction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action, other.action);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChanges()).compareTo(other.isSetChanges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChanges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.changes, other.changes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCommitTime()).compareTo(other.isSetCommitTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommitTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commitTime, other.commitTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNewProperties()).compareTo(other.isSetNewProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newProperties, other.newProperties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOldProperties()).compareTo(other.isSetOldProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldProperties, other.oldProperties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TableCommitMeta(");
    boolean first = true;

    sb.append("tableIdentifier:");
    if (this.tableIdentifier == null) {
      sb.append("null");
    } else {
      sb.append(this.tableIdentifier);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("action:");
    if (this.action == null) {
      sb.append("null");
    } else {
      sb.append(this.action);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("changes:");
    if (this.changes == null) {
      sb.append("null");
    } else {
      sb.append(this.changes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("commitTime:");
    sb.append(this.commitTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("newProperties:");
    if (this.newProperties == null) {
      sb.append("null");
    } else {
      sb.append(this.newProperties);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldProperties:");
    if (this.oldProperties == null) {
      sb.append("null");
    } else {
      sb.append(this.oldProperties);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (tableIdentifier != null) {
      tableIdentifier.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TableCommitMetaStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TableCommitMetaStandardScheme getScheme() {
      return new TableCommitMetaStandardScheme();
    }
  }

  private static class TableCommitMetaStandardScheme extends org.apache.thrift.scheme.StandardScheme<TableCommitMeta> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TableCommitMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLE_IDENTIFIER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tableIdentifier = new com.netease.arctic.ams.api.TableIdentifier();
              struct.tableIdentifier.read(iprot);
              struct.setTableIdentifierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.action = iprot.readString();
              struct.setActionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHANGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                struct.changes = new java.util.ArrayList<TableChange>(_list64.size);
                @org.apache.thrift.annotation.Nullable TableChange _elem65;
                for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                {
                  _elem65 = new TableChange();
                  _elem65.read(iprot);
                  struct.changes.add(_elem65);
                }
                iprot.readListEnd();
              }
              struct.setChangesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMMIT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.commitTime = iprot.readI64();
              struct.setCommitTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NEW_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map67 = iprot.readMapBegin();
                struct.newProperties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map67.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key68;
                @org.apache.thrift.annotation.Nullable java.lang.String _val69;
                for (int _i70 = 0; _i70 < _map67.size; ++_i70)
                {
                  _key68 = iprot.readString();
                  _val69 = iprot.readString();
                  struct.newProperties.put(_key68, _val69);
                }
                iprot.readMapEnd();
              }
              struct.setNewPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OLD_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map71 = iprot.readMapBegin();
                struct.oldProperties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map71.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key72;
                @org.apache.thrift.annotation.Nullable java.lang.String _val73;
                for (int _i74 = 0; _i74 < _map71.size; ++_i74)
                {
                  _key72 = iprot.readString();
                  _val73 = iprot.readString();
                  struct.oldProperties.put(_key72, _val73);
                }
                iprot.readMapEnd();
              }
              struct.setOldPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TableCommitMeta struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tableIdentifier != null) {
        oprot.writeFieldBegin(TABLE_IDENTIFIER_FIELD_DESC);
        struct.tableIdentifier.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.action != null) {
        oprot.writeFieldBegin(ACTION_FIELD_DESC);
        oprot.writeString(struct.action);
        oprot.writeFieldEnd();
      }
      if (struct.changes != null) {
        oprot.writeFieldBegin(CHANGES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.changes.size()));
          for (TableChange _iter75 : struct.changes)
          {
            _iter75.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COMMIT_TIME_FIELD_DESC);
      oprot.writeI64(struct.commitTime);
      oprot.writeFieldEnd();
      if (struct.newProperties != null) {
        oprot.writeFieldBegin(NEW_PROPERTIES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.newProperties.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter76 : struct.newProperties.entrySet())
          {
            oprot.writeString(_iter76.getKey());
            oprot.writeString(_iter76.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.oldProperties != null) {
        oprot.writeFieldBegin(OLD_PROPERTIES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.oldProperties.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter77 : struct.oldProperties.entrySet())
          {
            oprot.writeString(_iter77.getKey());
            oprot.writeString(_iter77.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TableCommitMetaTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TableCommitMetaTupleScheme getScheme() {
      return new TableCommitMetaTupleScheme();
    }
  }

  private static class TableCommitMetaTupleScheme extends org.apache.thrift.scheme.TupleScheme<TableCommitMeta> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TableCommitMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTableIdentifier()) {
        optionals.set(0);
      }
      if (struct.isSetAction()) {
        optionals.set(1);
      }
      if (struct.isSetChanges()) {
        optionals.set(2);
      }
      if (struct.isSetCommitTime()) {
        optionals.set(3);
      }
      if (struct.isSetNewProperties()) {
        optionals.set(4);
      }
      if (struct.isSetOldProperties()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetTableIdentifier()) {
        struct.tableIdentifier.write(oprot);
      }
      if (struct.isSetAction()) {
        oprot.writeString(struct.action);
      }
      if (struct.isSetChanges()) {
        {
          oprot.writeI32(struct.changes.size());
          for (TableChange _iter78 : struct.changes)
          {
            _iter78.write(oprot);
          }
        }
      }
      if (struct.isSetCommitTime()) {
        oprot.writeI64(struct.commitTime);
      }
      if (struct.isSetNewProperties()) {
        {
          oprot.writeI32(struct.newProperties.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter79 : struct.newProperties.entrySet())
          {
            oprot.writeString(_iter79.getKey());
            oprot.writeString(_iter79.getValue());
          }
        }
      }
      if (struct.isSetOldProperties()) {
        {
          oprot.writeI32(struct.oldProperties.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter80 : struct.oldProperties.entrySet())
          {
            oprot.writeString(_iter80.getKey());
            oprot.writeString(_iter80.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TableCommitMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.tableIdentifier = new com.netease.arctic.ams.api.TableIdentifier();
        struct.tableIdentifier.read(iprot);
        struct.setTableIdentifierIsSet(true);
      }
      if (incoming.get(1)) {
        struct.action = iprot.readString();
        struct.setActionIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list81 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.changes = new java.util.ArrayList<TableChange>(_list81.size);
          @org.apache.thrift.annotation.Nullable TableChange _elem82;
          for (int _i83 = 0; _i83 < _list81.size; ++_i83)
          {
            _elem82 = new TableChange();
            _elem82.read(iprot);
            struct.changes.add(_elem82);
          }
        }
        struct.setChangesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.commitTime = iprot.readI64();
        struct.setCommitTimeIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map84 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.newProperties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map84.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key85;
          @org.apache.thrift.annotation.Nullable java.lang.String _val86;
          for (int _i87 = 0; _i87 < _map84.size; ++_i87)
          {
            _key85 = iprot.readString();
            _val86 = iprot.readString();
            struct.newProperties.put(_key85, _val86);
          }
        }
        struct.setNewPropertiesIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map88 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.oldProperties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map88.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key89;
          @org.apache.thrift.annotation.Nullable java.lang.String _val90;
          for (int _i91 = 0; _i91 < _map88.size; ++_i91)
          {
            _key89 = iprot.readString();
            _val90 = iprot.readString();
            struct.oldProperties.put(_key89, _val90);
          }
        }
        struct.setOldPropertiesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

