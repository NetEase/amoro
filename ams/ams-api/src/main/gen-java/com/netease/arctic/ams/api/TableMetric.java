/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.netease.arctic.ams.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2022-10-19")
public class TableMetric implements org.apache.thrift.TBase<TableMetric, TableMetric._Fields>, java.io.Serializable, Cloneable, Comparable<TableMetric> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TableMetric");

  private static final org.apache.thrift.protocol.TField INNER_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("innerTable", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField METRIC_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("metricName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField METRIC_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("metricValue", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TableMetricStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TableMetricTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String innerTable; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String metricName; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String metricValue; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INNER_TABLE((short)1, "innerTable"),
    METRIC_NAME((short)2, "metricName"),
    METRIC_VALUE((short)3, "metricValue");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INNER_TABLE
          return INNER_TABLE;
        case 2: // METRIC_NAME
          return METRIC_NAME;
        case 3: // METRIC_VALUE
          return METRIC_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INNER_TABLE, new org.apache.thrift.meta_data.FieldMetaData("innerTable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METRIC_NAME, new org.apache.thrift.meta_data.FieldMetaData("metricName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METRIC_VALUE, new org.apache.thrift.meta_data.FieldMetaData("metricValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TableMetric.class, metaDataMap);
  }

  public TableMetric() {
  }

  public TableMetric(
    java.lang.String innerTable,
    java.lang.String metricName,
    java.lang.String metricValue)
  {
    this();
    this.innerTable = innerTable;
    this.metricName = metricName;
    this.metricValue = metricValue;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TableMetric(TableMetric other) {
    if (other.isSetInnerTable()) {
      this.innerTable = other.innerTable;
    }
    if (other.isSetMetricName()) {
      this.metricName = other.metricName;
    }
    if (other.isSetMetricValue()) {
      this.metricValue = other.metricValue;
    }
  }

  public TableMetric deepCopy() {
    return new TableMetric(this);
  }

  @Override
  public void clear() {
    this.innerTable = null;
    this.metricName = null;
    this.metricValue = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getInnerTable() {
    return this.innerTable;
  }

  public TableMetric setInnerTable(@org.apache.thrift.annotation.Nullable java.lang.String innerTable) {
    this.innerTable = innerTable;
    return this;
  }

  public void unsetInnerTable() {
    this.innerTable = null;
  }

  /** Returns true if field innerTable is set (has been assigned a value) and false otherwise */
  public boolean isSetInnerTable() {
    return this.innerTable != null;
  }

  public void setInnerTableIsSet(boolean value) {
    if (!value) {
      this.innerTable = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMetricName() {
    return this.metricName;
  }

  public TableMetric setMetricName(@org.apache.thrift.annotation.Nullable java.lang.String metricName) {
    this.metricName = metricName;
    return this;
  }

  public void unsetMetricName() {
    this.metricName = null;
  }

  /** Returns true if field metricName is set (has been assigned a value) and false otherwise */
  public boolean isSetMetricName() {
    return this.metricName != null;
  }

  public void setMetricNameIsSet(boolean value) {
    if (!value) {
      this.metricName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMetricValue() {
    return this.metricValue;
  }

  public TableMetric setMetricValue(@org.apache.thrift.annotation.Nullable java.lang.String metricValue) {
    this.metricValue = metricValue;
    return this;
  }

  public void unsetMetricValue() {
    this.metricValue = null;
  }

  /** Returns true if field metricValue is set (has been assigned a value) and false otherwise */
  public boolean isSetMetricValue() {
    return this.metricValue != null;
  }

  public void setMetricValueIsSet(boolean value) {
    if (!value) {
      this.metricValue = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case INNER_TABLE:
      if (value == null) {
        unsetInnerTable();
      } else {
        setInnerTable((java.lang.String)value);
      }
      break;

    case METRIC_NAME:
      if (value == null) {
        unsetMetricName();
      } else {
        setMetricName((java.lang.String)value);
      }
      break;

    case METRIC_VALUE:
      if (value == null) {
        unsetMetricValue();
      } else {
        setMetricValue((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case INNER_TABLE:
      return getInnerTable();

    case METRIC_NAME:
      return getMetricName();

    case METRIC_VALUE:
      return getMetricValue();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case INNER_TABLE:
      return isSetInnerTable();
    case METRIC_NAME:
      return isSetMetricName();
    case METRIC_VALUE:
      return isSetMetricValue();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TableMetric)
      return this.equals((TableMetric)that);
    return false;
  }

  public boolean equals(TableMetric that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_innerTable = true && this.isSetInnerTable();
    boolean that_present_innerTable = true && that.isSetInnerTable();
    if (this_present_innerTable || that_present_innerTable) {
      if (!(this_present_innerTable && that_present_innerTable))
        return false;
      if (!this.innerTable.equals(that.innerTable))
        return false;
    }

    boolean this_present_metricName = true && this.isSetMetricName();
    boolean that_present_metricName = true && that.isSetMetricName();
    if (this_present_metricName || that_present_metricName) {
      if (!(this_present_metricName && that_present_metricName))
        return false;
      if (!this.metricName.equals(that.metricName))
        return false;
    }

    boolean this_present_metricValue = true && this.isSetMetricValue();
    boolean that_present_metricValue = true && that.isSetMetricValue();
    if (this_present_metricValue || that_present_metricValue) {
      if (!(this_present_metricValue && that_present_metricValue))
        return false;
      if (!this.metricValue.equals(that.metricValue))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetInnerTable()) ? 131071 : 524287);
    if (isSetInnerTable())
      hashCode = hashCode * 8191 + innerTable.hashCode();

    hashCode = hashCode * 8191 + ((isSetMetricName()) ? 131071 : 524287);
    if (isSetMetricName())
      hashCode = hashCode * 8191 + metricName.hashCode();

    hashCode = hashCode * 8191 + ((isSetMetricValue()) ? 131071 : 524287);
    if (isSetMetricValue())
      hashCode = hashCode * 8191 + metricValue.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TableMetric other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetInnerTable()).compareTo(other.isSetInnerTable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInnerTable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.innerTable, other.innerTable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMetricName()).compareTo(other.isSetMetricName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetricName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metricName, other.metricName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMetricValue()).compareTo(other.isSetMetricValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetricValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metricValue, other.metricValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TableMetric(");
    boolean first = true;

    sb.append("innerTable:");
    if (this.innerTable == null) {
      sb.append("null");
    } else {
      sb.append(this.innerTable);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metricName:");
    if (this.metricName == null) {
      sb.append("null");
    } else {
      sb.append(this.metricName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metricValue:");
    if (this.metricValue == null) {
      sb.append("null");
    } else {
      sb.append(this.metricValue);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TableMetricStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TableMetricStandardScheme getScheme() {
      return new TableMetricStandardScheme();
    }
  }

  private static class TableMetricStandardScheme extends org.apache.thrift.scheme.StandardScheme<TableMetric> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TableMetric struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INNER_TABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.innerTable = iprot.readString();
              struct.setInnerTableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // METRIC_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.metricName = iprot.readString();
              struct.setMetricNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // METRIC_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.metricValue = iprot.readString();
              struct.setMetricValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TableMetric struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.innerTable != null) {
        oprot.writeFieldBegin(INNER_TABLE_FIELD_DESC);
        oprot.writeString(struct.innerTable);
        oprot.writeFieldEnd();
      }
      if (struct.metricName != null) {
        oprot.writeFieldBegin(METRIC_NAME_FIELD_DESC);
        oprot.writeString(struct.metricName);
        oprot.writeFieldEnd();
      }
      if (struct.metricValue != null) {
        oprot.writeFieldBegin(METRIC_VALUE_FIELD_DESC);
        oprot.writeString(struct.metricValue);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TableMetricTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TableMetricTupleScheme getScheme() {
      return new TableMetricTupleScheme();
    }
  }

  private static class TableMetricTupleScheme extends org.apache.thrift.scheme.TupleScheme<TableMetric> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TableMetric struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetInnerTable()) {
        optionals.set(0);
      }
      if (struct.isSetMetricName()) {
        optionals.set(1);
      }
      if (struct.isSetMetricValue()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetInnerTable()) {
        oprot.writeString(struct.innerTable);
      }
      if (struct.isSetMetricName()) {
        oprot.writeString(struct.metricName);
      }
      if (struct.isSetMetricValue()) {
        oprot.writeString(struct.metricValue);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TableMetric struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.innerTable = iprot.readString();
        struct.setInnerTableIsSet(true);
      }
      if (incoming.get(1)) {
        struct.metricName = iprot.readString();
        struct.setMetricNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.metricValue = iprot.readString();
        struct.setMetricValueIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

